//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from php.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


    using System;
    using System.Text;
    using System.Collections.Generic;

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class phpParser : Parser {
	public const int
		PLUS=1, MINUS=2, MULT=3, DIV=4, EQ=5, ISEQ=6, NOTEQ=7, GT=8, GE=9, LT=10, 
		LE=11, IF=12, ELSEIF=13, ELSEIFDEFAULT=14, ELSE=15, ENDIF=16, ECHO=17, 
		SWITCH=18, ENDSWITCH=19, CASE=20, BREAK=21, DEFAULT=22, VARDUMP=23, FUNCTION=24, 
		RETURN=25, TRUE=26, FALSE=27, LPAREN=28, RPAREN=29, LCURLY=30, RCURLY=31, 
		SEMI=32, COMMA=33, COLON=34, VAR=35, LABEL=36, INTEGER=37, BOOLVAL=38, 
		WS=39;
	public const int
		RULE_phpDoc = 0, RULE_statement = 1, RULE_varDump = 2, RULE_varDumpArgHelp = 3, 
		RULE_varDumpArg = 4, RULE_echoStatement = 5, RULE_echoArgument = 6, RULE_declaration = 7, 
		RULE_type = 8, RULE_boolean = 9, RULE_varName = 10, RULE_functionDec = 11, 
		RULE_parameterList = 12, RULE_parameterVar = 13, RULE_functionBody = 14, 
		RULE_functionBodystatements = 15, RULE_functionCall = 16, RULE_functionName = 17, 
		RULE_argumentList = 18, RULE_argument = 19, RULE_returnStatement = 20, 
		RULE_ifStatemetDefault = 21, RULE_elseifDefaultStatement = 22, RULE_elseDefaultStatement = 23, 
		RULE_ifStatementAlternate = 24, RULE_elseifAlternateStatement = 25, RULE_elseAlternateStatement = 26, 
		RULE_conditionBody = 27, RULE_condition = 28, RULE_parenthesis = 29, RULE_expression = 30, 
		RULE_comparision = 31, RULE_add = 32, RULE_mult = 33, RULE_nLRE = 34, 
		RULE_switchStatementDefault = 35, RULE_switchStatementAlternate = 36, 
		RULE_switchBlock = 37, RULE_switchCases = 38, RULE_switchCase = 39, RULE_addAction = 40, 
		RULE_multAction = 41, RULE_action = 42, RULE_compare = 43;
	public static readonly string[] ruleNames = {
		"phpDoc", "statement", "varDump", "varDumpArgHelp", "varDumpArg", "echoStatement", 
		"echoArgument", "declaration", "type", "boolean", "varName", "functionDec", 
		"parameterList", "parameterVar", "functionBody", "functionBodystatements", 
		"functionCall", "functionName", "argumentList", "argument", "returnStatement", 
		"ifStatemetDefault", "elseifDefaultStatement", "elseDefaultStatement", 
		"ifStatementAlternate", "elseifAlternateStatement", "elseAlternateStatement", 
		"conditionBody", "condition", "parenthesis", "expression", "comparision", 
		"add", "mult", "nLRE", "switchStatementDefault", "switchStatementAlternate", 
		"switchBlock", "switchCases", "switchCase", "addAction", "multAction", 
		"action", "compare"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'='", "'=='", "'!='", "'>'", "'>='", 
		"'<'", "'<='", "'if'", "'elseif'", "'else if'", "'else'", "'endif'", "'echo'", 
		"'switch'", "'endswitch'", "'case'", "'break'", "'default'", "'var_dump'", 
		"'function'", "'return'", "'true'", "'false'", "'('", "')'", "'{'", "'}'", 
		"';'", "','", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PLUS", "MINUS", "MULT", "DIV", "EQ", "ISEQ", "NOTEQ", "GT", "GE", 
		"LT", "LE", "IF", "ELSEIF", "ELSEIFDEFAULT", "ELSE", "ENDIF", "ECHO", 
		"SWITCH", "ENDSWITCH", "CASE", "BREAK", "DEFAULT", "VARDUMP", "FUNCTION", 
		"RETURN", "TRUE", "FALSE", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "SEMI", 
		"COMMA", "COLON", "VAR", "LABEL", "INTEGER", "BOOLVAL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "php.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


	    public void print(string s){
	        Console.Write(s);
	    }

	    public void print(int s){
	            Console.Write(s);
	    }

	    public class Variable{
	        public string name;
	        public string type;
	        public string value;
	    }

	    public class Function{
	        public string name;
	        public int parameterCount;
	        public string returnType;
	        public List<Variable> parameterNames = new List<Variable>();
	        public List<string> arguments = new List<string>();
	    }

	    public string doAction(string oper1, string op, string oper2){

	        long op1 = 0;
	        long op2 = 0;
	        bool bop1 = false;
	        bool bop2 = false;
	        long res = 0;
	        bool boolRes = false;
	        bool isin = false;

	        if(long.TryParse(oper1, out op1) && long.TryParse(oper2, out op2)){
	            switch(op){
	                case "+":
	                res = op1 + op2;
	                isin = true;
	                break;
	                case "-":
	                res = op1 - op2;
	                isin = true;
	                break;
	                case "*":
	                res = op1 * op2;
	                isin = true;
	                break;
	                case "/":
	                res = op1 / op2;
	                isin = true;
	                break;
	                case ">":
	                boolRes = (op1 > op2);
	                break;
	                case "<":
	                boolRes = (op1 < op2);
	                break;
	                case "==":
	                boolRes = (op1 == op2);
	                break;
	                case "!=":
	                boolRes = (op1 != op2);
	                break;
	                case "<=":
	                boolRes = (op1 <= op2);
	                break;
	                case ">=":
	                boolRes = (op1 >= op2);
	                break;
	            }
	        }
	        else if(bool.TryParse(oper1, out bop1) && bool.TryParse(oper2, out bop2)){
	            int op1int = bop1 ? 1 : 0;
	            int op2int = bop2 ? 1 : 0;
	            switch(op){
	                case "+":
	                res = op1int + op2int;
	                isin = true;
	                break;
	                case "-":
	                res = op1int - op2int;
	                isin = true;
	                break;
	                case "*":
	                res = op1int * op2int;
	                isin = true;
	                break;
	                case "/":
	                res = op1int / op2int;
	                isin = true;
	                break;
	                case ">":
	                boolRes = (op1int > op2int);
	                break;
	                case "<":
	                boolRes = (op1int < op2int);
	                break;
	                case "==":
	                boolRes = (op1int == op2int);
	                break;
	                case "!=":
	                boolRes = (op1int != op2int);
	                break;
	                case "<=":
	                boolRes = (op1int <= op2int);
	                break;
	                case ">=":
	                boolRes = (op1int >= op2int);
	                break;
	            }

	        }
	        if(isin){
	            return res.ToString();
	        }
	        else{
	            return boolRes.ToString().ToLower();
	        }
	    }

	    int parCount = 0;
	    int argCount = 0;
	    bool isEnteredElif = false;
	    bool switchBreaked = false;

	    public static List<Variable> vars = new List<Variable>();
	    public static List<Function> functions = new List<Function>();

	    public static List<string> functionParams = new List<string>();
	    public static List<string> functionArgs = new List<string>();

	    


	public phpParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class PhpDocContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public PhpDocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phpDoc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterPhpDoc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitPhpDoc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhpDoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PhpDocContext phpDoc() {
		PhpDocContext _localctx = new PhpDocContext(Context, State);
		EnterRule(_localctx, 0, RULE_phpDoc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 88; statement(true);
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << ECHO) | (1L << SWITCH) | (1L << VARDUMP) | (1L << FUNCTION) | (1L << TRUE) | (1L << FALSE) | (1L << LPAREN) | (1L << VAR) | (1L << LABEL) | (1L << INTEGER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public bool b;
		public string statRes;
		public EchoStatementContext echoStatement() {
			return GetRuleContext<EchoStatementContext>(0);
		}
		public FunctionDecContext functionDec() {
			return GetRuleContext<FunctionDecContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(phpParser.SEMI, 0); }
		public IfStatemetDefaultContext ifStatemetDefault() {
			return GetRuleContext<IfStatemetDefaultContext>(0);
		}
		public IfStatementAlternateContext ifStatementAlternate() {
			return GetRuleContext<IfStatementAlternateContext>(0);
		}
		public SwitchStatementDefaultContext switchStatementDefault() {
			return GetRuleContext<SwitchStatementDefaultContext>(0);
		}
		public SwitchStatementAlternateContext switchStatementAlternate() {
			return GetRuleContext<SwitchStatementAlternateContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDumpContext varDump() {
			return GetRuleContext<VarDumpContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public StatementContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement(bool b) {
		StatementContext _localctx = new StatementContext(Context, State, b);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; echoStatement(_localctx.b);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; functionDec(_localctx.b);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95; functionCall(_localctx.b);
				State = 96; Match(SEMI);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 98; ifStatemetDefault(_localctx.b);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 99; ifStatementAlternate(_localctx.b);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 100; switchStatementDefault(_localctx.b);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 101; switchStatementAlternate(_localctx.b);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 102; declaration(_localctx.b);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 103; expression(_localctx.b);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 104; varDump(_localctx.b);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDumpContext : ParserRuleContext {
		public bool b;
		public ITerminalNode VARDUMP() { return GetToken(phpParser.VARDUMP, 0); }
		public ITerminalNode LPAREN() { return GetToken(phpParser.LPAREN, 0); }
		public VarDumpArgHelpContext[] varDumpArgHelp() {
			return GetRuleContexts<VarDumpArgHelpContext>();
		}
		public VarDumpArgHelpContext varDumpArgHelp(int i) {
			return GetRuleContext<VarDumpArgHelpContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(phpParser.RPAREN, 0); }
		public ITerminalNode SEMI() { return GetToken(phpParser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(phpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(phpParser.COMMA, i);
		}
		public VarDumpContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public VarDumpContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_varDump; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterVarDump(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitVarDump(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDumpContext varDump(bool b) {
		VarDumpContext _localctx = new VarDumpContext(Context, State, b);
		EnterRule(_localctx, 4, RULE_varDump);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(VARDUMP);
			State = 108; Match(LPAREN);
			State = 109; varDumpArgHelp(_localctx.b);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 110; Match(COMMA);
				State = 111; varDumpArgHelp(_localctx.b);
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 117; Match(RPAREN);
			State = 118; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDumpArgHelpContext : ParserRuleContext {
		public bool b;
		public VarDumpArgContext _varDumpArg;
		public VarDumpArgContext varDumpArg() {
			return GetRuleContext<VarDumpArgContext>(0);
		}
		public VarDumpArgHelpContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public VarDumpArgHelpContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_varDumpArgHelp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterVarDumpArgHelp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitVarDumpArgHelp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDumpArgHelp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDumpArgHelpContext varDumpArgHelp(bool b) {
		VarDumpArgHelpContext _localctx = new VarDumpArgHelpContext(Context, State, b);
		EnterRule(_localctx, 6, RULE_varDumpArgHelp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; _localctx._varDumpArg = varDumpArg();

			        if(_localctx.b && _localctx._varDumpArg.exists) print(String.Format("{0}({1})\n", _localctx._varDumpArg.dumpValType, _localctx._varDumpArg.dumpVal));
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDumpArgContext : ParserRuleContext {
		public string dumpVal;
		public string dumpValType;
		public bool exists =  true;
		public ExpressionContext _expression;
		public IToken _INTEGER;
		public BooleanContext _boolean;
		public VarNameContext _varName;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INTEGER() { return GetToken(phpParser.INTEGER, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public VarNameContext varName() {
			return GetRuleContext<VarNameContext>(0);
		}
		public VarDumpArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDumpArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterVarDumpArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitVarDumpArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDumpArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDumpArgContext varDumpArg() {
		VarDumpArgContext _localctx = new VarDumpArgContext(Context, State);
		EnterRule(_localctx, 8, RULE_varDumpArg);
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; _localctx._expression = expression(true);

				        _localctx.dumpVal =  _localctx._expression.expRes;
				        if(_localctx._expression.expRes == "true" || _localctx._expression.expRes == "false"){
				            _localctx.dumpValType =  "bool";
				        }
				        else{
				            _localctx.dumpValType =  "int";
				        }
				    
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126; _localctx._INTEGER = Match(INTEGER);

				        _localctx.dumpVal =  (_localctx._INTEGER!=null?_localctx._INTEGER.Text:null);
				        _localctx.dumpValType =  "int";
				    
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 128; _localctx._boolean = boolean();

				        _localctx.dumpVal =  (_localctx._boolean!=null?TokenStream.GetText(_localctx._boolean.Start,_localctx._boolean.Stop):null);
				        _localctx.dumpValType =  "bool";
				    
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 131; functionCall(true);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 132; _localctx._varName = varName();

				        bool f = false;

				        foreach(Variable v in vars){
				            if(v.name == (_localctx._varName!=null?TokenStream.GetText(_localctx._varName.Start,_localctx._varName.Stop):null)){
				                _localctx.dumpValType =  v.type;
				                _localctx.dumpVal =  v.value;
				                f = true;
				            }
				        }

				        if(!f){
				            print("line " + _localctx._varName.lineNumber.ToString() + ": Undefined variable " + (_localctx._varName!=null?TokenStream.GetText(_localctx._varName.Start,_localctx._varName.Stop):null));
				            _localctx.exists =  false;
				        }
				    
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EchoStatementContext : ParserRuleContext {
		public bool b;
		public EchoArgumentContext _echoArgument;
		public ITerminalNode ECHO() { return GetToken(phpParser.ECHO, 0); }
		public EchoArgumentContext echoArgument() {
			return GetRuleContext<EchoArgumentContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(phpParser.SEMI, 0); }
		public EchoStatementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public EchoStatementContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_echoStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterEchoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitEchoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEchoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EchoStatementContext echoStatement(bool b) {
		EchoStatementContext _localctx = new EchoStatementContext(Context, State, b);
		EnterRule(_localctx, 10, RULE_echoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(ECHO);
			State = 138; _localctx._echoArgument = echoArgument();
			State = 139; Match(SEMI);

			        if(_localctx.b) print(_localctx._echoArgument.echoRes);
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EchoArgumentContext : ParserRuleContext {
		public string echoRes;
		public IToken _INTEGER;
		public VarNameContext _varName;
		public ExpressionContext _expression;
		public ITerminalNode INTEGER() { return GetToken(phpParser.INTEGER, 0); }
		public VarNameContext varName() {
			return GetRuleContext<VarNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public EchoArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_echoArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterEchoArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitEchoArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEchoArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EchoArgumentContext echoArgument() {
		EchoArgumentContext _localctx = new EchoArgumentContext(Context, State);
		EnterRule(_localctx, 12, RULE_echoArgument);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 142; _localctx._INTEGER = Match(INTEGER);

				        _localctx.echoRes =  (_localctx._INTEGER!=null?_localctx._INTEGER.Text:null).ToString();
				    
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144; _localctx._varName = varName();

				        bool f = false;;

				        foreach(Variable v in vars){
				            if(v.name == (_localctx._varName!=null?TokenStream.GetText(_localctx._varName.Start,_localctx._varName.Stop):null)){
				                _localctx.echoRes =  v.value;
				                f = true;
				            }
				        }
				        if(!f){
				            print("line " + _localctx._varName.lineNumber.ToString() + ": Undefined variable " + (_localctx._varName!=null?TokenStream.GetText(_localctx._varName.Start,_localctx._varName.Stop):null) + "\n");
				        }
				    
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 147; _localctx._expression = expression(true);

				        _localctx.echoRes =  _localctx._expression.expRes;
				    
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 150; functionCall(true);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public bool b;
		public VarNameContext _varName;
		public TypeContext _type;
		public VarNameContext varName() {
			return GetRuleContext<VarNameContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(phpParser.EQ, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(phpParser.SEMI, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public DeclarationContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration(bool b) {
		DeclarationContext _localctx = new DeclarationContext(Context, State, b);
		EnterRule(_localctx, 14, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; _localctx._varName = varName();
			State = 154; Match(EQ);
			State = 155; _localctx._type = type();
			State = 156; Match(SEMI);

			        if(_localctx.b){
			            Variable variable = new Variable();

			            int i = -1;
			            bool found = false;

			            variable.name = (_localctx._varName!=null?TokenStream.GetText(_localctx._varName.Start,_localctx._varName.Stop):null);

			            foreach(Variable v in vars){
			                i++;
			                if(v.name == (_localctx._varName!=null?TokenStream.GetText(_localctx._varName.Start,_localctx._varName.Stop):null)){
			                    variable.type = _localctx._type.myType;
			                    variable.value = _localctx._type.rValue;
			                    found = true;
			                    break;
			                }
			            }

			            if(found){
			                vars[i] = variable;
			            }
			            else {
			                variable.value = _localctx._type.rValue;
			                variable.type = _localctx._type.myType;
			                vars.Add(variable);
			            }

			            foreach(Variable v in vars){
			                //print(String.Format("{0} {1} = {2}\t{3}\n", v.type, v.name, v.value, vars.Count));
			            }

			            //print(String.Format("{0} {1} = {2}\n", variable.type, variable.name, variable.value));
			        }
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public string myType;
		public string rValue;
		public bool f =  true;
		public int lineNo;
		public VarNameContext _varName;
		public BooleanContext _boolean;
		public IToken _INTEGER;
		public ExpressionContext _expression;
		public VarNameContext varName() {
			return GetRuleContext<VarNameContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode INTEGER() { return GetToken(phpParser.INTEGER, 0); }
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_type);
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159; _localctx._varName = varName();

				        bool founded = false;

				        foreach(Variable v in vars){
				            if(v.name == (_localctx._varName!=null?TokenStream.GetText(_localctx._varName.Start,_localctx._varName.Stop):null)){
				                _localctx.myType =  v.type;
				                _localctx.rValue =  v.value;
				                founded = true;
				            }
				        }
				        if(!founded){
				            _localctx.f =  false;
				            _localctx.lineNo =  _localctx._varName.lineNumber;
				        }
				    
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162; _localctx._boolean = boolean();

				        _localctx.myType =  "bool";
				        _localctx.rValue =  (_localctx._boolean!=null?TokenStream.GetText(_localctx._boolean.Start,_localctx._boolean.Stop):null);
				    
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165; _localctx._INTEGER = Match(INTEGER);

				        _localctx.myType =  "int";
				        _localctx.rValue =  (_localctx._INTEGER!=null?_localctx._INTEGER.Text:null);
				    
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 167; functionCall(true);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 168; _localctx._expression = expression(true);

				        if(_localctx._expression.expRes == "true" || _localctx._expression.expRes == "false"){
				            _localctx.myType =  "bool";
				        }
				        else{
				            _localctx.myType =  "int";
				        }
				        _localctx.rValue =  _localctx._expression.expRes;
				    
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(phpParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(phpParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 18, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			_la = TokenStream.La(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarNameContext : ParserRuleContext {
		public int lineNumber;
		public IToken _VAR;
		public ITerminalNode VAR() { return GetToken(phpParser.VAR, 0); }
		public VarNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterVarName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitVarName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarNameContext varName() {
		VarNameContext _localctx = new VarNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_varName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; _localctx._VAR = Match(VAR);

			        _localctx.lineNumber =  (_localctx._VAR!=null?_localctx._VAR.Line:0);
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDecContext : ParserRuleContext {
		public bool b;
		public ITerminalNode FUNCTION() { return GetToken(phpParser.FUNCTION, 0); }
		public ITerminalNode LABEL() { return GetToken(phpParser.LABEL, 0); }
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDecContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FunctionDecContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_functionDec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterFunctionDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitFunctionDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDecContext functionDec(bool b) {
		FunctionDecContext _localctx = new FunctionDecContext(Context, State, b);
		EnterRule(_localctx, 22, RULE_functionDec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(FUNCTION);
			State = 179; Match(LABEL);
			State = 180; parameterList();
			State = 181; functionBody(false);

			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterVarContext a;
		public ParameterVarContext b;
		public ITerminalNode LPAREN() { return GetToken(phpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(phpParser.RPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(phpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(phpParser.COMMA, i);
		}
		public ParameterVarContext[] parameterVar() {
			return GetRuleContexts<ParameterVarContext>();
		}
		public ParameterVarContext parameterVar(int i) {
			return GetRuleContext<ParameterVarContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(LPAREN);
			State = 186;
			_la = TokenStream.La(1);
			if (_la==VAR) {
				{
				State = 185; _localctx.a = parameterVar();
				}
			}

			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 188; Match(COMMA);
				State = 189; _localctx.b = parameterVar();
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 195; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterVarContext : ParserRuleContext {
		public IToken _VAR;
		public ITerminalNode VAR() { return GetToken(phpParser.VAR, 0); }
		public ParameterVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterVar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterParameterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitParameterVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterVarContext parameterVar() {
		ParameterVarContext _localctx = new ParameterVarContext(Context, State);
		EnterRule(_localctx, 26, RULE_parameterVar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; _localctx._VAR = Match(VAR);

			        functionParams.Add((_localctx._VAR!=null?_localctx._VAR.Text:null));
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public bool b;
		public string functionBodyReturnValue =  "null";
		public string functionBodyReturnType =  "void";
		public FunctionBodystatementsContext _functionBodystatements;
		public ITerminalNode LCURLY() { return GetToken(phpParser.LCURLY, 0); }
		public FunctionBodystatementsContext functionBodystatements() {
			return GetRuleContext<FunctionBodystatementsContext>(0);
		}
		public ITerminalNode RCURLY() { return GetToken(phpParser.RCURLY, 0); }
		public FunctionBodyContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FunctionBodyContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody(bool b) {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State, b);
		EnterRule(_localctx, 28, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(LCURLY);
			State = 201; _localctx._functionBodystatements = functionBodystatements(_localctx.b);
			State = 202; Match(RCURLY);

			        _localctx.functionBodyReturnValue =  _localctx._functionBodystatements.functionBodyStatemetnsReturnValue;
			        _localctx.functionBodyReturnType =  _localctx._functionBodystatements.functionBodyStatementsReturnType;
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodystatementsContext : ParserRuleContext {
		public bool b;
		public string functionBodyStatemetnsReturnValue =  "null";
		public string functionBodyStatementsReturnType =  "void";
		public ReturnStatementContext _returnStatement;
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public FunctionBodystatementsContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FunctionBodystatementsContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_functionBodystatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterFunctionBodystatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitFunctionBodystatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBodystatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodystatementsContext functionBodystatements(bool b) {
		FunctionBodystatementsContext _localctx = new FunctionBodystatementsContext(Context, State, b);
		EnterRule(_localctx, 30, RULE_functionBodystatements);
		int _la;
		try {
			State = 214;
			switch (TokenStream.La(1)) {
			case IF:
			case ECHO:
			case SWITCH:
			case VARDUMP:
			case FUNCTION:
			case TRUE:
			case FALSE:
			case LPAREN:
			case RCURLY:
			case VAR:
			case LABEL:
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << ECHO) | (1L << SWITCH) | (1L << VARDUMP) | (1L << FUNCTION) | (1L << TRUE) | (1L << FALSE) | (1L << LPAREN) | (1L << VAR) | (1L << LABEL) | (1L << INTEGER))) != 0)) {
					{
					{
					State = 205; statement(_localctx.b);
					}
					}
					State = 210;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211; _localctx._returnStatement = returnStatement();

				        _localctx.functionBodyStatemetnsReturnValue =  _localctx._returnStatement.returnValue;
				        _localctx.functionBodyStatementsReturnType =  _localctx._returnStatement.returnType;
				    
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public bool b;
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(phpParser.LPAREN, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(phpParser.RPAREN, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FunctionCallContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall(bool b) {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State, b);
		EnterRule(_localctx, 32, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; functionName();
			State = 217; Match(LPAREN);
			State = 218; argumentList();
			State = 219; Match(RPAREN);

			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public ITerminalNode LABEL() { return GetToken(phpParser.LABEL, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(LABEL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(phpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(phpParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 36, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << LPAREN) | (1L << VAR) | (1L << LABEL) | (1L << INTEGER))) != 0)) {
				{
				State = 224; argument();
				}
			}

			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 227; Match(COMMA);
				State = 228; argument();
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public TypeContext _type;
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] LPAREN() { return GetTokens(phpParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(phpParser.LPAREN, i);
		}
		public ITerminalNode[] RPAREN() { return GetTokens(phpParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(phpParser.RPAREN, i);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 38, RULE_argument);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 234; Match(LPAREN);
					}
					} 
				}
				State = 239;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 240; _localctx._type = type();
			State = 244;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 241; Match(RPAREN);
					}
					} 
				}
				State = 246;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}

			        functionArgs.Add(String.Format("{0}:{1}", _localctx._type.myType, _localctx._type.rValue));
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public string returnType =  "void";
		public string returnValue =  "null";
		public TypeContext _type;
		public ITerminalNode RETURN() { return GetToken(phpParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(phpParser.SEMI, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(RETURN);
			State = 251;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << LPAREN) | (1L << VAR) | (1L << LABEL) | (1L << INTEGER))) != 0)) {
				{
				State = 250; _localctx._type = type();
				}
			}

			State = 253; Match(SEMI);

			        _localctx.returnType =  _localctx._type.myType;
			        _localctx.returnValue =  _localctx._type.rValue;
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatemetDefaultContext : ParserRuleContext {
		public bool c;
		public bool b =  false;
		public bool elif =  false;
		public bool iselif =  false;
		public ConditionContext _condition;
		public ElseifDefaultStatementContext _elseifDefaultStatement;
		public ITerminalNode IF() { return GetToken(phpParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(phpParser.LPAREN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(phpParser.RPAREN, 0); }
		public ITerminalNode LCURLY() { return GetToken(phpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(phpParser.RCURLY, 0); }
		public ConditionBodyContext conditionBody() {
			return GetRuleContext<ConditionBodyContext>(0);
		}
		public ElseifDefaultStatementContext[] elseifDefaultStatement() {
			return GetRuleContexts<ElseifDefaultStatementContext>();
		}
		public ElseifDefaultStatementContext elseifDefaultStatement(int i) {
			return GetRuleContext<ElseifDefaultStatementContext>(i);
		}
		public ElseDefaultStatementContext elseDefaultStatement() {
			return GetRuleContext<ElseDefaultStatementContext>(0);
		}
		public IfStatemetDefaultContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public IfStatemetDefaultContext(ParserRuleContext parent, int invokingState, bool c)
			: base(parent, invokingState)
		{
			this.c = c;
		}
		public override int RuleIndex { get { return RULE_ifStatemetDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterIfStatemetDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitIfStatemetDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatemetDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatemetDefaultContext ifStatemetDefault(bool c) {
		IfStatemetDefaultContext _localctx = new IfStatemetDefaultContext(Context, State, c);
		EnterRule(_localctx, 42, RULE_ifStatemetDefault);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(IF);
			State = 257; Match(LPAREN);
			State = 258; _localctx._condition = condition();

			    if(_localctx._condition.isTrue && _localctx.c)
			        _localctx.b =  true;
			    
			State = 260; Match(RPAREN);
			State = 261; Match(LCURLY);
			{
			State = 262; conditionBody(_localctx.b);
			}
			State = 263; Match(RCURLY);
			State = 267;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 264; _localctx._elseifDefaultStatement = elseifDefaultStatement(!_localctx.b);
					}
					} 
				}
				State = 269;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}

			        if(isEnteredElif){
			            _localctx.elif =  _localctx._elseifDefaultStatement.res;
			            isEnteredElif = false;
			        }

			    
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 271; elseDefaultStatement(!(_localctx.elif || _localctx.b));
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifDefaultStatementContext : ParserRuleContext {
		public bool b;
		public bool res =  false;
		public bool c =  false;
		public ConditionContext _condition;
		public ITerminalNode LPAREN() { return GetToken(phpParser.LPAREN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(phpParser.RPAREN, 0); }
		public ITerminalNode LCURLY() { return GetToken(phpParser.LCURLY, 0); }
		public ConditionBodyContext conditionBody() {
			return GetRuleContext<ConditionBodyContext>(0);
		}
		public ITerminalNode RCURLY() { return GetToken(phpParser.RCURLY, 0); }
		public ITerminalNode ELSEIFDEFAULT() { return GetToken(phpParser.ELSEIFDEFAULT, 0); }
		public ITerminalNode ELSEIF() { return GetToken(phpParser.ELSEIF, 0); }
		public ElseifDefaultStatementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ElseifDefaultStatementContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_elseifDefaultStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterElseifDefaultStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitElseifDefaultStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifDefaultStatementContext elseifDefaultStatement(bool b) {
		ElseifDefaultStatementContext _localctx = new ElseifDefaultStatementContext(Context, State, b);
		EnterRule(_localctx, 44, RULE_elseifDefaultStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			_la = TokenStream.La(1);
			if ( !(_la==ELSEIF || _la==ELSEIFDEFAULT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 275; Match(LPAREN);
			State = 276; _localctx._condition = condition();

			        isEnteredElif = true;
			        if(_localctx._condition.isTrue && _localctx.b){
			            _localctx.c =  true;
			        }
			        _localctx.res =  _localctx.c;
			     
			State = 278; Match(RPAREN);
			State = 279; Match(LCURLY);
			State = 280; conditionBody(_localctx.c);
			State = 281; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseDefaultStatementContext : ParserRuleContext {
		public bool b;
		public ITerminalNode ELSE() { return GetToken(phpParser.ELSE, 0); }
		public ITerminalNode LCURLY() { return GetToken(phpParser.LCURLY, 0); }
		public ConditionBodyContext conditionBody() {
			return GetRuleContext<ConditionBodyContext>(0);
		}
		public ITerminalNode RCURLY() { return GetToken(phpParser.RCURLY, 0); }
		public ElseDefaultStatementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ElseDefaultStatementContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_elseDefaultStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterElseDefaultStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitElseDefaultStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseDefaultStatementContext elseDefaultStatement(bool b) {
		ElseDefaultStatementContext _localctx = new ElseDefaultStatementContext(Context, State, b);
		EnterRule(_localctx, 46, RULE_elseDefaultStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(ELSE);
			State = 284; Match(LCURLY);
			State = 285; conditionBody(b);
			State = 286; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementAlternateContext : ParserRuleContext {
		public bool c;
		public bool b =  false;
		public bool elif =  false;
		public bool iselif =  false;
		public ConditionContext _condition;
		public ElseifAlternateStatementContext _elseifAlternateStatement;
		public ITerminalNode IF() { return GetToken(phpParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(phpParser.LPAREN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(phpParser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(phpParser.COLON, 0); }
		public ConditionBodyContext conditionBody() {
			return GetRuleContext<ConditionBodyContext>(0);
		}
		public ITerminalNode ENDIF() { return GetToken(phpParser.ENDIF, 0); }
		public ITerminalNode SEMI() { return GetToken(phpParser.SEMI, 0); }
		public ElseifAlternateStatementContext[] elseifAlternateStatement() {
			return GetRuleContexts<ElseifAlternateStatementContext>();
		}
		public ElseifAlternateStatementContext elseifAlternateStatement(int i) {
			return GetRuleContext<ElseifAlternateStatementContext>(i);
		}
		public ElseAlternateStatementContext elseAlternateStatement() {
			return GetRuleContext<ElseAlternateStatementContext>(0);
		}
		public IfStatementAlternateContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public IfStatementAlternateContext(ParserRuleContext parent, int invokingState, bool c)
			: base(parent, invokingState)
		{
			this.c = c;
		}
		public override int RuleIndex { get { return RULE_ifStatementAlternate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterIfStatementAlternate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitIfStatementAlternate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementAlternate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementAlternateContext ifStatementAlternate(bool c) {
		IfStatementAlternateContext _localctx = new IfStatementAlternateContext(Context, State, c);
		EnterRule(_localctx, 48, RULE_ifStatementAlternate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(IF);
			State = 289; Match(LPAREN);
			State = 290; _localctx._condition = condition();

			        if(_localctx._condition.isTrue && _localctx.c)
			            _localctx.b =  true;
			    
			State = 292; Match(RPAREN);
			State = 293; Match(COLON);
			State = 294; conditionBody(_localctx.b);
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ELSEIF) {
				{
				{
				State = 295; _localctx._elseifAlternateStatement = elseifAlternateStatement(!_localctx.b);
				}
				}
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}

			        if(isEnteredElif){
			             _localctx.elif =  _localctx._elseifAlternateStatement.res;
			             isEnteredElif = false;
			        }
			    
			State = 303;
			_la = TokenStream.La(1);
			if (_la==ELSE) {
				{
				State = 302; elseAlternateStatement(!(_localctx.elif || _localctx.b));
				}
			}

			State = 305; Match(ENDIF);
			State = 306; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifAlternateStatementContext : ParserRuleContext {
		public bool b;
		public bool res =  false;
		public bool c =  false;
		public ConditionContext _condition;
		public ITerminalNode ELSEIF() { return GetToken(phpParser.ELSEIF, 0); }
		public ITerminalNode LPAREN() { return GetToken(phpParser.LPAREN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(phpParser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(phpParser.COLON, 0); }
		public ConditionBodyContext conditionBody() {
			return GetRuleContext<ConditionBodyContext>(0);
		}
		public ElseifAlternateStatementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ElseifAlternateStatementContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_elseifAlternateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterElseifAlternateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitElseifAlternateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifAlternateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifAlternateStatementContext elseifAlternateStatement(bool b) {
		ElseifAlternateStatementContext _localctx = new ElseifAlternateStatementContext(Context, State, b);
		EnterRule(_localctx, 50, RULE_elseifAlternateStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; Match(ELSEIF);
			State = 309; Match(LPAREN);
			State = 310; _localctx._condition = condition();

			        isEnteredElif = true;
			        if(_localctx._condition.isTrue && _localctx.b){
			            _localctx.c =  true;
			        }
			        _localctx.res =  _localctx.c;
			     
			State = 312; Match(RPAREN);
			State = 313; Match(COLON);
			State = 314; conditionBody(_localctx.c);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseAlternateStatementContext : ParserRuleContext {
		public bool b;
		public ITerminalNode ELSE() { return GetToken(phpParser.ELSE, 0); }
		public ITerminalNode COLON() { return GetToken(phpParser.COLON, 0); }
		public ConditionBodyContext conditionBody() {
			return GetRuleContext<ConditionBodyContext>(0);
		}
		public ElseAlternateStatementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ElseAlternateStatementContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_elseAlternateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterElseAlternateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitElseAlternateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseAlternateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseAlternateStatementContext elseAlternateStatement(bool b) {
		ElseAlternateStatementContext _localctx = new ElseAlternateStatementContext(Context, State, b);
		EnterRule(_localctx, 52, RULE_elseAlternateStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(ELSE);
			State = 317; Match(COLON);
			State = 318; conditionBody(_localctx.b);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionBodyContext : ParserRuleContext {
		public bool b;
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ConditionBodyContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ConditionBodyContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_conditionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterConditionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitConditionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionBodyContext conditionBody(bool b) {
		ConditionBodyContext _localctx = new ConditionBodyContext(Context, State, b);
		EnterRule(_localctx, 54, RULE_conditionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << ECHO) | (1L << SWITCH) | (1L << VARDUMP) | (1L << FUNCTION) | (1L << TRUE) | (1L << FALSE) | (1L << LPAREN) | (1L << VAR) | (1L << LABEL) | (1L << INTEGER))) != 0)) {
				{
				{
				State = 320; statement(_localctx.b);
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public bool isTrue;
		public IToken _INTEGER;
		public IToken _VAR;
		public ExpressionContext _expression;
		public ITerminalNode TRUE() { return GetToken(phpParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(phpParser.FALSE, 0); }
		public ITerminalNode INTEGER() { return GetToken(phpParser.INTEGER, 0); }
		public ITerminalNode VAR() { return GetToken(phpParser.VAR, 0); }
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 56, RULE_condition);
		try {
			State = 339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 326; Match(TRUE);

				        _localctx.isTrue =  true;
				    
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 328; Match(FALSE);

				        _localctx.isTrue =  false;
				    
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 330; _localctx._INTEGER = Match(INTEGER);

				        _localctx.isTrue =  (_localctx._INTEGER!=null?_localctx._INTEGER.Text:null) != "0";
				    
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 332; _localctx._VAR = Match(VAR);

				        foreach(Variable v in vars){
				            if(v.name == (_localctx._VAR!=null?_localctx._VAR.Text:null)){
				                _localctx.isTrue =  v.value != "0";
				            }
				        }
				    
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 334; functionCall(true);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 335; _localctx._expression = expression(true);

				        _localctx.isTrue =  (_localctx._expression.expRes != "0" && _localctx._expression.expRes != "false");
				    
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{

				        _localctx.isTrue =  false;
				    
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesisContext : ParserRuleContext {
		public string parRes;
		public ExpressionContext _expression;
		public IToken _INTEGER;
		public BooleanContext _boolean;
		public VarNameContext _varName;
		public ITerminalNode LPAREN() { return GetToken(phpParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(phpParser.RPAREN, 0); }
		public ITerminalNode INTEGER() { return GetToken(phpParser.INTEGER, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public VarNameContext varName() {
			return GetRuleContext<VarNameContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesisContext parenthesis() {
		ParenthesisContext _localctx = new ParenthesisContext(Context, State);
		EnterRule(_localctx, 58, RULE_parenthesis);
		try {
			State = 355;
			switch (TokenStream.La(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 341; Match(LPAREN);
				State = 342; _localctx._expression = expression(true);
				State = 343; Match(RPAREN);

				        _localctx.parRes =  _localctx._expression.expRes;
				    
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 346; _localctx._INTEGER = Match(INTEGER);

				        _localctx.parRes =  (_localctx._INTEGER!=null?_localctx._INTEGER.Text:null);
				    
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 348; _localctx._boolean = boolean();

				        _localctx.parRes =  (_localctx._boolean!=null?TokenStream.GetText(_localctx._boolean.Start,_localctx._boolean.Stop):null);
				    
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 351; _localctx._varName = varName();

				        bool f = false;
				        foreach(Variable v in vars){
				            if(v.name == (_localctx._varName!=null?TokenStream.GetText(_localctx._varName.Start,_localctx._varName.Stop):null)){
				                _localctx.parRes =  v.value;
				                f = true;
				            }
				        }
				        if(!f){
				            print("line " + _localctx._varName.lineNumber.ToString() + ": Undefined varibale " + (_localctx._varName!=null?TokenStream.GetText(_localctx._varName.Start,_localctx._varName.Stop):null) + "\n");
				        }
				    
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 354; functionCall(true);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public bool b;
		public string expRes;
		public ComparisionContext _comparision;
		public ComparisionContext comparision() {
			return GetRuleContext<ComparisionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ExpressionContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression(bool b) {
		ExpressionContext _localctx = new ExpressionContext(Context, State, b);
		EnterRule(_localctx, 60, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; _localctx._comparision = comparision(0);

			        if(_localctx.b) _localctx.expRes =  _localctx._comparision.compRes;
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisionContext : ParserRuleContext {
		public string compRes;
		public ComparisionContext a;
		public AddContext _add;
		public CompareContext _compare;
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public CompareContext compare() {
			return GetRuleContext<CompareContext>(0);
		}
		public ComparisionContext comparision() {
			return GetRuleContext<ComparisionContext>(0);
		}
		public ComparisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparision; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterComparision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitComparision(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisionContext comparision() {
		return comparision(0);
	}

	private ComparisionContext comparision(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ComparisionContext _localctx = new ComparisionContext(Context, _parentState);
		ComparisionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_comparision, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 361; _localctx._add = add(0);

			        _localctx.compRes =  _localctx._add.addRes;
			    
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 371;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ComparisionContext(_parentctx, _parentState);
					_localctx.a = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_comparision);
					State = 364;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 365; _localctx._compare = compare();
					State = 366; _localctx._add = add(0);

					                  _localctx.compRes =  doAction(_localctx.a.compRes, (_localctx._compare!=null?TokenStream.GetText(_localctx._compare.Start,_localctx._compare.Stop):null), _localctx._add.addRes);
					              
					}
					} 
				}
				State = 373;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public string addRes;
		public AddContext a;
		public MultContext _mult;
		public AddActionContext _addAction;
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public AddActionContext addAction() {
			return GetRuleContext<AddActionContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		return add(0);
	}

	private AddContext add(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AddContext _localctx = new AddContext(Context, _parentState);
		AddContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_add, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 375; _localctx._mult = mult(0);

			        _localctx.addRes =  _localctx._mult.multRes;
			    
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 385;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AddContext(_parentctx, _parentState);
					_localctx.a = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_add);
					State = 378;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 379; _localctx._addAction = addAction();
					State = 380; _localctx._mult = mult(0);

					                  _localctx.addRes =  doAction(_localctx.a.addRes, (_localctx._addAction!=null?TokenStream.GetText(_localctx._addAction.Start,_localctx._addAction.Stop):null), _localctx._mult.multRes);
					              
					}
					} 
				}
				State = 387;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public string multRes;
		public MultContext a;
		public NLREContext _nLRE;
		public MultActionContext _multAction;
		public NLREContext nLRE() {
			return GetRuleContext<NLREContext>(0);
		}
		public MultActionContext multAction() {
			return GetRuleContext<MultActionContext>(0);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		return mult(0);
	}

	private MultContext mult(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultContext _localctx = new MultContext(Context, _parentState);
		MultContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_mult, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 389; _localctx._nLRE = nLRE();

			        _localctx.multRes =  _localctx._nLRE.nlreRes;
			    
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 399;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultContext(_parentctx, _parentState);
					_localctx.a = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_mult);
					State = 392;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 393; _localctx._multAction = multAction();
					State = 394; _localctx._nLRE = nLRE();

					                  _localctx.multRes =  doAction(_localctx.a.multRes, (_localctx._multAction!=null?TokenStream.GetText(_localctx._multAction.Start,_localctx._multAction.Stop):null), _localctx._nLRE.nlreRes);
					              
					}
					} 
				}
				State = 401;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NLREContext : ParserRuleContext {
		public string nlreRes;
		public ParenthesisContext _parenthesis;
		public ParenthesisContext parenthesis() {
			return GetRuleContext<ParenthesisContext>(0);
		}
		public NLREContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nLRE; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterNLRE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitNLRE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNLRE(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NLREContext nLRE() {
		NLREContext _localctx = new NLREContext(Context, State);
		EnterRule(_localctx, 68, RULE_nLRE);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402; _localctx._parenthesis = parenthesis();

			        _localctx.nlreRes =  _localctx._parenthesis.parRes;
			     
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementDefaultContext : ParserRuleContext {
		public bool b;
		public TypeContext _type;
		public ITerminalNode SWITCH() { return GetToken(phpParser.SWITCH, 0); }
		public ITerminalNode LPAREN() { return GetToken(phpParser.LPAREN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(phpParser.RPAREN, 0); }
		public ITerminalNode LCURLY() { return GetToken(phpParser.LCURLY, 0); }
		public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public ITerminalNode RCURLY() { return GetToken(phpParser.RCURLY, 0); }
		public SwitchStatementDefaultContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public SwitchStatementDefaultContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_switchStatementDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterSwitchStatementDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitSwitchStatementDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementDefaultContext switchStatementDefault(bool b) {
		SwitchStatementDefaultContext _localctx = new SwitchStatementDefaultContext(Context, State, b);
		EnterRule(_localctx, 70, RULE_switchStatementDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405; Match(SWITCH);
			State = 406; Match(LPAREN);
			State = 407; _localctx._type = type();

			        if(!_localctx._type.f){
			            print("line " + _localctx._type.lineNo.ToString() + ": Undefined varibale " + (_localctx._type!=null?TokenStream.GetText(_localctx._type.Start,_localctx._type.Stop):null) + "\n");
			        }
			    
			State = 409; Match(RPAREN);
			State = 410; Match(LCURLY);
			State = 411; switchBlock((_localctx.b && _localctx._type.f), _localctx._type.rValue);
			State = 412; Match(RCURLY);

			        switchBreaked = false;
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementAlternateContext : ParserRuleContext {
		public bool b;
		public TypeContext _type;
		public ITerminalNode SWITCH() { return GetToken(phpParser.SWITCH, 0); }
		public ITerminalNode LPAREN() { return GetToken(phpParser.LPAREN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(phpParser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(phpParser.COLON, 0); }
		public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public ITerminalNode ENDSWITCH() { return GetToken(phpParser.ENDSWITCH, 0); }
		public ITerminalNode SEMI() { return GetToken(phpParser.SEMI, 0); }
		public SwitchStatementAlternateContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public SwitchStatementAlternateContext(ParserRuleContext parent, int invokingState, bool b)
			: base(parent, invokingState)
		{
			this.b = b;
		}
		public override int RuleIndex { get { return RULE_switchStatementAlternate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterSwitchStatementAlternate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitSwitchStatementAlternate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementAlternate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementAlternateContext switchStatementAlternate(bool b) {
		SwitchStatementAlternateContext _localctx = new SwitchStatementAlternateContext(Context, State, b);
		EnterRule(_localctx, 72, RULE_switchStatementAlternate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415; Match(SWITCH);
			State = 416; Match(LPAREN);
			State = 417; _localctx._type = type();

			        if(!_localctx._type.f){
			            print("line " + _localctx._type.lineNo.ToString() + ": Undefined varibale " + (_localctx._type!=null?TokenStream.GetText(_localctx._type.Start,_localctx._type.Stop):null) + "\n");
			        }
			    
			State = 419; Match(RPAREN);
			State = 420; Match(COLON);
			State = 421; switchBlock((_localctx.b && _localctx._type.f), _localctx._type.rValue);
			State = 422; Match(ENDSWITCH);
			State = 423; Match(SEMI);

			        switchBreaked = false;
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		public bool b;
		public string compVal;
		public SwitchCasesContext switchCases() {
			return GetRuleContext<SwitchCasesContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(phpParser.DEFAULT, 0); }
		public ITerminalNode COLON() { return GetToken(phpParser.COLON, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public SwitchBlockContext(ParserRuleContext parent, int invokingState, bool b, string compVal)
			: base(parent, invokingState)
		{
			this.b = b;
			this.compVal = compVal;
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock(bool b, string compVal) {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State, b, compVal);
		EnterRule(_localctx, 74, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; switchCases(_localctx.compVal);
			State = 435;
			_la = TokenStream.La(1);
			if (_la==DEFAULT) {
				{
				State = 427; Match(DEFAULT);
				State = 428; Match(COLON);
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << ECHO) | (1L << SWITCH) | (1L << VARDUMP) | (1L << FUNCTION) | (1L << TRUE) | (1L << FALSE) | (1L << LPAREN) | (1L << VAR) | (1L << LABEL) | (1L << INTEGER))) != 0)) {
					{
					{
					State = 429; statement(!switchBreaked);
					}
					}
					State = 434;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCasesContext : ParserRuleContext {
		public string compVal;
		public SwitchCaseContext[] switchCase() {
			return GetRuleContexts<SwitchCaseContext>();
		}
		public SwitchCaseContext switchCase(int i) {
			return GetRuleContext<SwitchCaseContext>(i);
		}
		public SwitchCasesContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public SwitchCasesContext(ParserRuleContext parent, int invokingState, string compVal)
			: base(parent, invokingState)
		{
			this.compVal = compVal;
		}
		public override int RuleIndex { get { return RULE_switchCases; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterSwitchCases(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitSwitchCases(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCases(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCasesContext switchCases(string compVal) {
		SwitchCasesContext _localctx = new SwitchCasesContext(Context, State, compVal);
		EnterRule(_localctx, 76, RULE_switchCases);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CASE) {
				{
				{
				State = 437; switchCase(_localctx.compVal);
				}
				}
				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseContext : ParserRuleContext {
		public string compVal;
		public bool b =  false;
		public TypeContext _type;
		public ITerminalNode CASE() { return GetToken(phpParser.CASE, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(phpParser.COLON, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode BREAK() { return GetToken(phpParser.BREAK, 0); }
		public ITerminalNode SEMI() { return GetToken(phpParser.SEMI, 0); }
		public SwitchCaseContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public SwitchCaseContext(ParserRuleContext parent, int invokingState, string compVal)
			: base(parent, invokingState)
		{
			this.compVal = compVal;
		}
		public override int RuleIndex { get { return RULE_switchCase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitSwitchCase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseContext switchCase(string compVal) {
		SwitchCaseContext _localctx = new SwitchCaseContext(Context, State, compVal);
		EnterRule(_localctx, 78, RULE_switchCase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 443; Match(CASE);
			State = 444; _localctx._type = type();

			        if(!switchBreaked && doAction(_localctx.compVal, "==", (_localctx._type!=null?TokenStream.GetText(_localctx._type.Start,_localctx._type.Stop):null)) == "true"){
			            _localctx.b =  true;
			        }
			    
			State = 446; Match(COLON);
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << ECHO) | (1L << SWITCH) | (1L << VARDUMP) | (1L << FUNCTION) | (1L << TRUE) | (1L << FALSE) | (1L << LPAREN) | (1L << VAR) | (1L << LABEL) | (1L << INTEGER))) != 0)) {
				{
				{
				State = 447; statement(_localctx.b);
				}
				}
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 456;
			_la = TokenStream.La(1);
			if (_la==BREAK) {
				{
				State = 453; Match(BREAK);
				State = 454; Match(SEMI);

				        if(_localctx.b) {switchBreaked = true;}
				    
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddActionContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(phpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(phpParser.MINUS, 0); }
		public AddActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterAddAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitAddAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddActionContext addAction() {
		AddActionContext _localctx = new AddActionContext(Context, State);
		EnterRule(_localctx, 80, RULE_addAction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			_la = TokenStream.La(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultActionContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(phpParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(phpParser.DIV, 0); }
		public MultActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterMultAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitMultAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultActionContext multAction() {
		MultActionContext _localctx = new MultActionContext(Context, State);
		EnterRule(_localctx, 82, RULE_multAction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			_la = TokenStream.La(1);
			if ( !(_la==MULT || _la==DIV) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(phpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(phpParser.MINUS, 0); }
		public ITerminalNode MULT() { return GetToken(phpParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(phpParser.DIV, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 84, RULE_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << MULT) | (1L << DIV))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareContext : ParserRuleContext {
		public ITerminalNode ISEQ() { return GetToken(phpParser.ISEQ, 0); }
		public ITerminalNode NOTEQ() { return GetToken(phpParser.NOTEQ, 0); }
		public ITerminalNode GT() { return GetToken(phpParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(phpParser.GE, 0); }
		public ITerminalNode LT() { return GetToken(phpParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(phpParser.LE, 0); }
		public CompareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.EnterCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IphpListener typedListener = listener as IphpListener;
			if (typedListener != null) typedListener.ExitCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IphpVisitor<TResult> typedVisitor = visitor as IphpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareContext compare() {
		CompareContext _localctx = new CompareContext(Context, State);
		EnterRule(_localctx, 86, RULE_compare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ISEQ) | (1L << NOTEQ) | (1L << GT) | (1L << GE) | (1L << LT) | (1L << LE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 31: return comparision_sempred((ComparisionContext)_localctx, predIndex);
		case 32: return add_sempred((AddContext)_localctx, predIndex);
		case 33: return mult_sempred((MultContext)_localctx, predIndex);
		}
		return true;
	}
	private bool comparision_sempred(ComparisionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool add_sempred(AddContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool mult_sempred(MultContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3)\x1D5");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4");
		sb.Append("\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4");
		sb.Append("\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4\x17\t\x17");
		sb.Append("\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B\x4\x1C");
		sb.Append("\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!\t!");
		sb.Append("\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t");
		sb.Append(")\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x3\x2\x6\x2\\\n\x2\r\x2\xE\x2");
		sb.Append("]\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x5\x3l\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4");
		sb.Append("s\n\x4\f\x4\xE\x4v\v\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5");
		sb.Append("\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x5\x6\x8A\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3");
		sb.Append("\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x9A\n\b\x3\t\x3\t");
		sb.Append("\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n");
		sb.Append("\x3\n\x3\n\x3\n\x3\n\x5\n\xAE\n\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3");
		sb.Append("\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x5\xE\xBD\n\xE\x3\xE");
		sb.Append("\x3\xE\a\xE\xC1\n\xE\f\xE\xE\xE\xC4\v\xE\x3\xE\x3\xE\x3\xF\x3");
		sb.Append("\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\a\x11\xD1");
		sb.Append("\n\x11\f\x11\xE\x11\xD4\v\x11\x3\x11\x3\x11\x3\x11\x5\x11\xD9");
		sb.Append("\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13");
		sb.Append("\x3\x14\x5\x14\xE4\n\x14\x3\x14\x3\x14\a\x14\xE8\n\x14\f\x14");
		sb.Append("\xE\x14\xEB\v\x14\x3\x15\a\x15\xEE\n\x15\f\x15\xE\x15\xF1\v");
		sb.Append("\x15\x3\x15\x3\x15\a\x15\xF5\n\x15\f\x15\xE\x15\xF8\v\x15\x3");
		sb.Append("\x15\x3\x15\x3\x16\x3\x16\x5\x16\xFE\n\x16\x3\x16\x3\x16\x3");
		sb.Append("\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17");
		sb.Append("\x3\x17\a\x17\x10C\n\x17\f\x17\xE\x17\x10F\v\x17\x3\x17\x3\x17");
		sb.Append("\x5\x17\x113\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18");
		sb.Append("\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3");
		sb.Append("\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\a\x1A");
		sb.Append("\x12B\n\x1A\f\x1A\xE\x1A\x12E\v\x1A\x3\x1A\x3\x1A\x5\x1A\x132");
		sb.Append("\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B");
		sb.Append("\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\a\x1D");
		sb.Append("\x144\n\x1D\f\x1D\xE\x1D\x147\v\x1D\x3\x1E\x3\x1E\x3\x1E\x3");
		sb.Append("\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E");
		sb.Append("\x3\x1E\x5\x1E\x156\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F");
		sb.Append("\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3");
		sb.Append("\x1F\x5\x1F\x166\n\x1F\x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3!\x3");
		sb.Append("!\x3!\x3!\a!\x174\n!\f!\xE!\x177\v!\x3\"\x3\"\x3\"\x3\"\x3\"");
		sb.Append("\x3\"\x3\"\x3\"\x3\"\a\"\x182\n\"\f\"\xE\"\x185\v\"\x3#\x3#");
		sb.Append("\x3#\x3#\x3#\x3#\x3#\x3#\x3#\a#\x190\n#\f#\xE#\x193\v#\x3$\x3");
		sb.Append("$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3");
		sb.Append("&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\a\'\x1B1\n");
		sb.Append("\'\f\'\xE\'\x1B4\v\'\x5\'\x1B6\n\'\x3(\a(\x1B9\n(\f(\xE(\x1BC");
		sb.Append("\v(\x3)\x3)\x3)\x3)\x3)\a)\x1C3\n)\f)\xE)\x1C6\v)\x3)\x3)\x3");
		sb.Append(")\x5)\x1CB\n)\x3*\x3*\x3+\x3+\x3,\x3,\x3-\x3-\x3-\x2\x5@\x42");
		sb.Append("\x44.\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$");
		sb.Append("&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVX\x2\b\x3\x2");
		sb.Append("\x1C\x1D\x3\x2\xF\x10\x3\x2\x3\x4\x3\x2\x5\x6\x3\x2\x3\x6\x3");
		sb.Append("\x2\b\r\x1DE\x2[\x3\x2\x2\x2\x4k\x3\x2\x2\x2\x6m\x3\x2\x2\x2");
		sb.Append("\bz\x3\x2\x2\x2\n\x89\x3\x2\x2\x2\f\x8B\x3\x2\x2\x2\xE\x99\x3");
		sb.Append("\x2\x2\x2\x10\x9B\x3\x2\x2\x2\x12\xAD\x3\x2\x2\x2\x14\xAF\x3");
		sb.Append("\x2\x2\x2\x16\xB1\x3\x2\x2\x2\x18\xB4\x3\x2\x2\x2\x1A\xBA\x3");
		sb.Append("\x2\x2\x2\x1C\xC7\x3\x2\x2\x2\x1E\xCA\x3\x2\x2\x2 \xD8\x3\x2");
		sb.Append("\x2\x2\"\xDA\x3\x2\x2\x2$\xE0\x3\x2\x2\x2&\xE3\x3\x2\x2\x2(");
		sb.Append("\xEF\x3\x2\x2\x2*\xFB\x3\x2\x2\x2,\x102\x3\x2\x2\x2.\x114\x3");
		sb.Append("\x2\x2\x2\x30\x11D\x3\x2\x2\x2\x32\x122\x3\x2\x2\x2\x34\x136");
		sb.Append("\x3\x2\x2\x2\x36\x13E\x3\x2\x2\x2\x38\x145\x3\x2\x2\x2:\x155");
		sb.Append("\x3\x2\x2\x2<\x165\x3\x2\x2\x2>\x167\x3\x2\x2\x2@\x16A\x3\x2");
		sb.Append("\x2\x2\x42\x178\x3\x2\x2\x2\x44\x186\x3\x2\x2\x2\x46\x194\x3");
		sb.Append("\x2\x2\x2H\x197\x3\x2\x2\x2J\x1A1\x3\x2\x2\x2L\x1AC\x3\x2\x2");
		sb.Append("\x2N\x1BA\x3\x2\x2\x2P\x1BD\x3\x2\x2\x2R\x1CC\x3\x2\x2\x2T\x1CE");
		sb.Append("\x3\x2\x2\x2V\x1D0\x3\x2\x2\x2X\x1D2\x3\x2\x2\x2Z\\\x5\x4\x3");
		sb.Append("\x2[Z\x3\x2\x2\x2\\]\x3\x2\x2\x2][\x3\x2\x2\x2]^\x3\x2\x2\x2");
		sb.Append("^\x3\x3\x2\x2\x2_l\x5\f\a\x2`l\x5\x18\r\x2\x61\x62\x5\"\x12");
		sb.Append("\x2\x62\x63\a\"\x2\x2\x63l\x3\x2\x2\x2\x64l\x5,\x17\x2\x65l");
		sb.Append("\x5\x32\x1A\x2\x66l\x5H%\x2gl\x5J&\x2hl\x5\x10\t\x2il\x5> \x2");
		sb.Append("jl\x5\x6\x4\x2k_\x3\x2\x2\x2k`\x3\x2\x2\x2k\x61\x3\x2\x2\x2");
		sb.Append("k\x64\x3\x2\x2\x2k\x65\x3\x2\x2\x2k\x66\x3\x2\x2\x2kg\x3\x2");
		sb.Append("\x2\x2kh\x3\x2\x2\x2ki\x3\x2\x2\x2kj\x3\x2\x2\x2l\x5\x3\x2\x2");
		sb.Append("\x2mn\a\x19\x2\x2no\a\x1E\x2\x2ot\x5\b\x5\x2pq\a#\x2\x2qs\x5");
		sb.Append("\b\x5\x2rp\x3\x2\x2\x2sv\x3\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2");
		sb.Append("\x2uw\x3\x2\x2\x2vt\x3\x2\x2\x2wx\a\x1F\x2\x2xy\a\"\x2\x2y\a");
		sb.Append("\x3\x2\x2\x2z{\x5\n\x6\x2{|\b\x5\x1\x2|\t\x3\x2\x2\x2}~\x5>");
		sb.Append(" \x2~\x7F\b\x6\x1\x2\x7F\x8A\x3\x2\x2\x2\x80\x81\a\'\x2\x2\x81");
		sb.Append("\x8A\b\x6\x1\x2\x82\x83\x5\x14\v\x2\x83\x84\b\x6\x1\x2\x84\x8A");
		sb.Append("\x3\x2\x2\x2\x85\x8A\x5\"\x12\x2\x86\x87\x5\x16\f\x2\x87\x88");
		sb.Append("\b\x6\x1\x2\x88\x8A\x3\x2\x2\x2\x89}\x3\x2\x2\x2\x89\x80\x3");
		sb.Append("\x2\x2\x2\x89\x82\x3\x2\x2\x2\x89\x85\x3\x2\x2\x2\x89\x86\x3");
		sb.Append("\x2\x2\x2\x8A\v\x3\x2\x2\x2\x8B\x8C\a\x13\x2\x2\x8C\x8D\x5\xE");
		sb.Append("\b\x2\x8D\x8E\a\"\x2\x2\x8E\x8F\b\a\x1\x2\x8F\r\x3\x2\x2\x2");
		sb.Append("\x90\x91\a\'\x2\x2\x91\x9A\b\b\x1\x2\x92\x93\x5\x16\f\x2\x93");
		sb.Append("\x94\b\b\x1\x2\x94\x9A\x3\x2\x2\x2\x95\x96\x5> \x2\x96\x97\b");
		sb.Append("\b\x1\x2\x97\x9A\x3\x2\x2\x2\x98\x9A\x5\"\x12\x2\x99\x90\x3");
		sb.Append("\x2\x2\x2\x99\x92\x3\x2\x2\x2\x99\x95\x3\x2\x2\x2\x99\x98\x3");
		sb.Append("\x2\x2\x2\x9A\xF\x3\x2\x2\x2\x9B\x9C\x5\x16\f\x2\x9C\x9D\a\a");
		sb.Append("\x2\x2\x9D\x9E\x5\x12\n\x2\x9E\x9F\a\"\x2\x2\x9F\xA0\b\t\x1");
		sb.Append("\x2\xA0\x11\x3\x2\x2\x2\xA1\xA2\x5\x16\f\x2\xA2\xA3\b\n\x1\x2");
		sb.Append("\xA3\xAE\x3\x2\x2\x2\xA4\xA5\x5\x14\v\x2\xA5\xA6\b\n\x1\x2\xA6");
		sb.Append("\xAE\x3\x2\x2\x2\xA7\xA8\a\'\x2\x2\xA8\xAE\b\n\x1\x2\xA9\xAE");
		sb.Append("\x5\"\x12\x2\xAA\xAB\x5> \x2\xAB\xAC\b\n\x1\x2\xAC\xAE\x3\x2");
		sb.Append("\x2\x2\xAD\xA1\x3\x2\x2\x2\xAD\xA4\x3\x2\x2\x2\xAD\xA7\x3\x2");
		sb.Append("\x2\x2\xAD\xA9\x3\x2\x2\x2\xAD\xAA\x3\x2\x2\x2\xAE\x13\x3\x2");
		sb.Append("\x2\x2\xAF\xB0\t\x2\x2\x2\xB0\x15\x3\x2\x2\x2\xB1\xB2\a%\x2");
		sb.Append("\x2\xB2\xB3\b\f\x1\x2\xB3\x17\x3\x2\x2\x2\xB4\xB5\a\x1A\x2\x2");
		sb.Append("\xB5\xB6\a&\x2\x2\xB6\xB7\x5\x1A\xE\x2\xB7\xB8\x5\x1E\x10\x2");
		sb.Append("\xB8\xB9\b\r\x1\x2\xB9\x19\x3\x2\x2\x2\xBA\xBC\a\x1E\x2\x2\xBB");
		sb.Append("\xBD\x5\x1C\xF\x2\xBC\xBB\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD");
		sb.Append("\xC2\x3\x2\x2\x2\xBE\xBF\a#\x2\x2\xBF\xC1\x5\x1C\xF\x2\xC0\xBE");
		sb.Append("\x3\x2\x2\x2\xC1\xC4\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC3");
		sb.Append("\x3\x2\x2\x2\xC3\xC5\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC5\xC6");
		sb.Append("\a\x1F\x2\x2\xC6\x1B\x3\x2\x2\x2\xC7\xC8\a%\x2\x2\xC8\xC9\b");
		sb.Append("\xF\x1\x2\xC9\x1D\x3\x2\x2\x2\xCA\xCB\a \x2\x2\xCB\xCC\x5 \x11");
		sb.Append("\x2\xCC\xCD\a!\x2\x2\xCD\xCE\b\x10\x1\x2\xCE\x1F\x3\x2\x2\x2");
		sb.Append("\xCF\xD1\x5\x4\x3\x2\xD0\xCF\x3\x2\x2\x2\xD1\xD4\x3\x2\x2\x2");
		sb.Append("\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD9\x3\x2\x2\x2");
		sb.Append("\xD4\xD2\x3\x2\x2\x2\xD5\xD6\x5*\x16\x2\xD6\xD7\b\x11\x1\x2");
		sb.Append("\xD7\xD9\x3\x2\x2\x2\xD8\xD2\x3\x2\x2\x2\xD8\xD5\x3\x2\x2\x2");
		sb.Append("\xD9!\x3\x2\x2\x2\xDA\xDB\x5$\x13\x2\xDB\xDC\a\x1E\x2\x2\xDC");
		sb.Append("\xDD\x5&\x14\x2\xDD\xDE\a\x1F\x2\x2\xDE\xDF\b\x12\x1\x2\xDF");
		sb.Append("#\x3\x2\x2\x2\xE0\xE1\a&\x2\x2\xE1%\x3\x2\x2\x2\xE2\xE4\x5(");
		sb.Append("\x15\x2\xE3\xE2\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\xE9\x3\x2");
		sb.Append("\x2\x2\xE5\xE6\a#\x2\x2\xE6\xE8\x5(\x15\x2\xE7\xE5\x3\x2\x2");
		sb.Append("\x2\xE8\xEB\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xE9\xEA\x3\x2\x2");
		sb.Append("\x2\xEA\'\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEC\xEE\a\x1E\x2\x2");
		sb.Append("\xED\xEC\x3\x2\x2\x2\xEE\xF1\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2");
		sb.Append("\xEF\xF0\x3\x2\x2\x2\xF0\xF2\x3\x2\x2\x2\xF1\xEF\x3\x2\x2\x2");
		sb.Append("\xF2\xF6\x5\x12\n\x2\xF3\xF5\a\x1F\x2\x2\xF4\xF3\x3\x2\x2\x2");
		sb.Append("\xF5\xF8\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2");
		sb.Append("\xF7\xF9\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF9\xFA\b\x15\x1\x2");
		sb.Append("\xFA)\x3\x2\x2\x2\xFB\xFD\a\x1B\x2\x2\xFC\xFE\x5\x12\n\x2\xFD");
		sb.Append("\xFC\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF");
		sb.Append("\x100\a\"\x2\x2\x100\x101\b\x16\x1\x2\x101+\x3\x2\x2\x2\x102");
		sb.Append("\x103\a\xE\x2\x2\x103\x104\a\x1E\x2\x2\x104\x105\x5:\x1E\x2");
		sb.Append("\x105\x106\b\x17\x1\x2\x106\x107\a\x1F\x2\x2\x107\x108\a \x2");
		sb.Append("\x2\x108\x109\x5\x38\x1D\x2\x109\x10D\a!\x2\x2\x10A\x10C\x5");
		sb.Append(".\x18\x2\x10B\x10A\x3\x2\x2\x2\x10C\x10F\x3\x2\x2\x2\x10D\x10B");
		sb.Append("\x3\x2\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E\x110\x3\x2\x2\x2\x10F");
		sb.Append("\x10D\x3\x2\x2\x2\x110\x112\b\x17\x1\x2\x111\x113\x5\x30\x19");
		sb.Append("\x2\x112\x111\x3\x2\x2\x2\x112\x113\x3\x2\x2\x2\x113-\x3\x2");
		sb.Append("\x2\x2\x114\x115\t\x3\x2\x2\x115\x116\a\x1E\x2\x2\x116\x117");
		sb.Append("\x5:\x1E\x2\x117\x118\b\x18\x1\x2\x118\x119\a\x1F\x2\x2\x119");
		sb.Append("\x11A\a \x2\x2\x11A\x11B\x5\x38\x1D\x2\x11B\x11C\a!\x2\x2\x11C");
		sb.Append("/\x3\x2\x2\x2\x11D\x11E\a\x11\x2\x2\x11E\x11F\a \x2\x2\x11F");
		sb.Append("\x120\x5\x38\x1D\x2\x120\x121\a!\x2\x2\x121\x31\x3\x2\x2\x2");
		sb.Append("\x122\x123\a\xE\x2\x2\x123\x124\a\x1E\x2\x2\x124\x125\x5:\x1E");
		sb.Append("\x2\x125\x126\b\x1A\x1\x2\x126\x127\a\x1F\x2\x2\x127\x128\a");
		sb.Append("$\x2\x2\x128\x12C\x5\x38\x1D\x2\x129\x12B\x5\x34\x1B\x2\x12A");
		sb.Append("\x129\x3\x2\x2\x2\x12B\x12E\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2");
		sb.Append("\x12C\x12D\x3\x2\x2\x2\x12D\x12F\x3\x2\x2\x2\x12E\x12C\x3\x2");
		sb.Append("\x2\x2\x12F\x131\b\x1A\x1\x2\x130\x132\x5\x36\x1C\x2\x131\x130");
		sb.Append("\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133");
		sb.Append("\x134\a\x12\x2\x2\x134\x135\a\"\x2\x2\x135\x33\x3\x2\x2\x2\x136");
		sb.Append("\x137\a\xF\x2\x2\x137\x138\a\x1E\x2\x2\x138\x139\x5:\x1E\x2");
		sb.Append("\x139\x13A\b\x1B\x1\x2\x13A\x13B\a\x1F\x2\x2\x13B\x13C\a$\x2");
		sb.Append("\x2\x13C\x13D\x5\x38\x1D\x2\x13D\x35\x3\x2\x2\x2\x13E\x13F\a");
		sb.Append("\x11\x2\x2\x13F\x140\a$\x2\x2\x140\x141\x5\x38\x1D\x2\x141\x37");
		sb.Append("\x3\x2\x2\x2\x142\x144\x5\x4\x3\x2\x143\x142\x3\x2\x2\x2\x144");
		sb.Append("\x147\x3\x2\x2\x2\x145\x143\x3\x2\x2\x2\x145\x146\x3\x2\x2\x2");
		sb.Append("\x146\x39\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2\x148\x149\a\x1C");
		sb.Append("\x2\x2\x149\x156\b\x1E\x1\x2\x14A\x14B\a\x1D\x2\x2\x14B\x156");
		sb.Append("\b\x1E\x1\x2\x14C\x14D\a\'\x2\x2\x14D\x156\b\x1E\x1\x2\x14E");
		sb.Append("\x14F\a%\x2\x2\x14F\x156\b\x1E\x1\x2\x150\x156\x5\"\x12\x2\x151");
		sb.Append("\x152\x5> \x2\x152\x153\b\x1E\x1\x2\x153\x156\x3\x2\x2\x2\x154");
		sb.Append("\x156\b\x1E\x1\x2\x155\x148\x3\x2\x2\x2\x155\x14A\x3\x2\x2\x2");
		sb.Append("\x155\x14C\x3\x2\x2\x2\x155\x14E\x3\x2\x2\x2\x155\x150\x3\x2");
		sb.Append("\x2\x2\x155\x151\x3\x2\x2\x2\x155\x154\x3\x2\x2\x2\x156;\x3");
		sb.Append("\x2\x2\x2\x157\x158\a\x1E\x2\x2\x158\x159\x5> \x2\x159\x15A");
		sb.Append("\a\x1F\x2\x2\x15A\x15B\b\x1F\x1\x2\x15B\x166\x3\x2\x2\x2\x15C");
		sb.Append("\x15D\a\'\x2\x2\x15D\x166\b\x1F\x1\x2\x15E\x15F\x5\x14\v\x2");
		sb.Append("\x15F\x160\b\x1F\x1\x2\x160\x166\x3\x2\x2\x2\x161\x162\x5\x16");
		sb.Append("\f\x2\x162\x163\b\x1F\x1\x2\x163\x166\x3\x2\x2\x2\x164\x166");
		sb.Append("\x5\"\x12\x2\x165\x157\x3\x2\x2\x2\x165\x15C\x3\x2\x2\x2\x165");
		sb.Append("\x15E\x3\x2\x2\x2\x165\x161\x3\x2\x2\x2\x165\x164\x3\x2\x2\x2");
		sb.Append("\x166=\x3\x2\x2\x2\x167\x168\x5@!\x2\x168\x169\b \x1\x2\x169");
		sb.Append("?\x3\x2\x2\x2\x16A\x16B\b!\x1\x2\x16B\x16C\x5\x42\"\x2\x16C");
		sb.Append("\x16D\b!\x1\x2\x16D\x175\x3\x2\x2\x2\x16E\x16F\f\x3\x2\x2\x16F");
		sb.Append("\x170\x5X-\x2\x170\x171\x5\x42\"\x2\x171\x172\b!\x1\x2\x172");
		sb.Append("\x174\x3\x2\x2\x2\x173\x16E\x3\x2\x2\x2\x174\x177\x3\x2\x2\x2");
		sb.Append("\x175\x173\x3\x2\x2\x2\x175\x176\x3\x2\x2\x2\x176\x41\x3\x2");
		sb.Append("\x2\x2\x177\x175\x3\x2\x2\x2\x178\x179\b\"\x1\x2\x179\x17A\x5");
		sb.Append("\x44#\x2\x17A\x17B\b\"\x1\x2\x17B\x183\x3\x2\x2\x2\x17C\x17D");
		sb.Append("\f\x3\x2\x2\x17D\x17E\x5R*\x2\x17E\x17F\x5\x44#\x2\x17F\x180");
		sb.Append("\b\"\x1\x2\x180\x182\x3\x2\x2\x2\x181\x17C\x3\x2\x2\x2\x182");
		sb.Append("\x185\x3\x2\x2\x2\x183\x181\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2");
		sb.Append("\x184\x43\x3\x2\x2\x2\x185\x183\x3\x2\x2\x2\x186\x187\b#\x1");
		sb.Append("\x2\x187\x188\x5\x46$\x2\x188\x189\b#\x1\x2\x189\x191\x3\x2");
		sb.Append("\x2\x2\x18A\x18B\f\x3\x2\x2\x18B\x18C\x5T+\x2\x18C\x18D\x5\x46");
		sb.Append("$\x2\x18D\x18E\b#\x1\x2\x18E\x190\x3\x2\x2\x2\x18F\x18A\x3\x2");
		sb.Append("\x2\x2\x190\x193\x3\x2\x2\x2\x191\x18F\x3\x2\x2\x2\x191\x192");
		sb.Append("\x3\x2\x2\x2\x192\x45\x3\x2\x2\x2\x193\x191\x3\x2\x2\x2\x194");
		sb.Append("\x195\x5<\x1F\x2\x195\x196\b$\x1\x2\x196G\x3\x2\x2\x2\x197\x198");
		sb.Append("\a\x14\x2\x2\x198\x199\a\x1E\x2\x2\x199\x19A\x5\x12\n\x2\x19A");
		sb.Append("\x19B\b%\x1\x2\x19B\x19C\a\x1F\x2\x2\x19C\x19D\a \x2\x2\x19D");
		sb.Append("\x19E\x5L\'\x2\x19E\x19F\a!\x2\x2\x19F\x1A0\b%\x1\x2\x1A0I\x3");
		sb.Append("\x2\x2\x2\x1A1\x1A2\a\x14\x2\x2\x1A2\x1A3\a\x1E\x2\x2\x1A3\x1A4");
		sb.Append("\x5\x12\n\x2\x1A4\x1A5\b&\x1\x2\x1A5\x1A6\a\x1F\x2\x2\x1A6\x1A7");
		sb.Append("\a$\x2\x2\x1A7\x1A8\x5L\'\x2\x1A8\x1A9\a\x15\x2\x2\x1A9\x1AA");
		sb.Append("\a\"\x2\x2\x1AA\x1AB\b&\x1\x2\x1ABK\x3\x2\x2\x2\x1AC\x1B5\x5");
		sb.Append("N(\x2\x1AD\x1AE\a\x18\x2\x2\x1AE\x1B2\a$\x2\x2\x1AF\x1B1\x5");
		sb.Append("\x4\x3\x2\x1B0\x1AF\x3\x2\x2\x2\x1B1\x1B4\x3\x2\x2\x2\x1B2\x1B0");
		sb.Append("\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3\x1B6\x3\x2\x2\x2\x1B4");
		sb.Append("\x1B2\x3\x2\x2\x2\x1B5\x1AD\x3\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2");
		sb.Append("\x1B6M\x3\x2\x2\x2\x1B7\x1B9\x5P)\x2\x1B8\x1B7\x3\x2\x2\x2\x1B9");
		sb.Append("\x1BC\x3\x2\x2\x2\x1BA\x1B8\x3\x2\x2\x2\x1BA\x1BB\x3\x2\x2\x2");
		sb.Append("\x1BBO\x3\x2\x2\x2\x1BC\x1BA\x3\x2\x2\x2\x1BD\x1BE\a\x16\x2");
		sb.Append("\x2\x1BE\x1BF\x5\x12\n\x2\x1BF\x1C0\b)\x1\x2\x1C0\x1C4\a$\x2");
		sb.Append("\x2\x1C1\x1C3\x5\x4\x3\x2\x1C2\x1C1\x3\x2\x2\x2\x1C3\x1C6\x3");
		sb.Append("\x2\x2\x2\x1C4\x1C2\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5\x1CA");
		sb.Append("\x3\x2\x2\x2\x1C6\x1C4\x3\x2\x2\x2\x1C7\x1C8\a\x17\x2\x2\x1C8");
		sb.Append("\x1C9\a\"\x2\x2\x1C9\x1CB\b)\x1\x2\x1CA\x1C7\x3\x2\x2\x2\x1CA");
		sb.Append("\x1CB\x3\x2\x2\x2\x1CBQ\x3\x2\x2\x2\x1CC\x1CD\t\x4\x2\x2\x1CD");
		sb.Append("S\x3\x2\x2\x2\x1CE\x1CF\t\x5\x2\x2\x1CFU\x3\x2\x2\x2\x1D0\x1D1");
		sb.Append("\t\x6\x2\x2\x1D1W\x3\x2\x2\x2\x1D2\x1D3\t\a\x2\x2\x1D3Y\x3\x2");
		sb.Append("\x2\x2 ]kt\x89\x99\xAD\xBC\xC2\xD2\xD8\xE3\xE9\xEF\xF6\xFD\x10D");
		sb.Append("\x112\x12C\x131\x145\x155\x165\x175\x183\x191\x1B2\x1B5\x1BA");
		sb.Append("\x1C4\x1CA");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
